{"version":3,"sources":["./src/app/sessions/session/session.page.html","./src/app/sessions/session/session.module.ts","./src/app/sessions/session/session.page.ts"],"names":[],"mappings":";;;;;;;;;AAAA,geAAge,gDAAgD,iLAAiL,+DAA+D,utBAAutB,iBAAiB,2CAA2C,mBAAmB,ylBAAylB,WAAW,iJ;;;;;;;;;;;;;;;;;;;;;;ACAnmE;AACM;AACF;AACU;AAEV;AAEA;AAE3C,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,yDAAW;KACzB;IACD;QACI,IAAI,EAAE,OAAO;QACb,YAAY,EAAE,GAAG,EAAE,CAAC,mSAA+B,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC;KACnF;CACJ,CAAC;AAWF,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;CAC7B;AADY,iBAAiB;IAT7B,8DAAQ,CAAC;QACN,OAAO,EAAE;YACL,4DAAY;YACZ,0DAAW;YACX,0DAAW;YACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;SAChC;QACD,YAAY,EAAE,CAAC,yDAAW,CAAC;KAC9B,CAAC;GACW,iBAAiB,CAC7B;AAD6B;;;;;;;;;;;;;;;;;;;;AC7BkB;AAEQ;AACC;AAGzD;;GAEG;AAMH,IAAa,WAAW,GAAxB,MAAa,WAAW;IASpB;;;;OAIG;IACH,YAAoB,WAAwB,EAAU,KAAqB;QAAvD,gBAAW,GAAX,WAAW,CAAa;QAAU,UAAK,GAAL,KAAK,CAAgB;QAV3E,sBAAiB,GAAc,EAAE,CAAC;QAClC,mBAAc,GAAG,oCAAoC,CAAC;QAUlD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACH,mBAAmB;QACf,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,CAAC,SAAS,CACjD,CAAC,QAAQ,CAAC,EAAE;YACR,IAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC;YACzC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CACvC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9C,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;gBAC3B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,CAC/C,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE;qBACtC,SAAS,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB;qBACzC,IAAI,CAAC,QAAQ;qBACT,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAC/E,GAAG,EAAE,CAAC,IAAI,CAAC,iCAAiC,GAAG,IAAI,CACtD,CAAC,CAAC;aACV;QACL,CAAC,CAAC,EACF,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,CAClD,CAAC;IACN,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,MAAgB,EAAE,EAAE;YAC/C,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC/B,CAAC;CACJ;;YAjCoC,kEAAW;YAAiB,8DAAc;;AAdlE,WAAW;IALvB,+DAAS,CAAC;QACP,QAAQ,EAAE,aAAa;QACvB,sJAAkC;KAErC,CAAC;2EAemC,kEAAW,EAAiB,8DAAc;GAdlE,WAAW,CA+CvB;AA/CuB","file":"session-session-module-es2015.js","sourcesContent":["module.exports = \"<ion-header class=\\\"ion-text-center\\\">\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button icon=\\\"arrow-back\\\" text=\\\"\\\"></ion-back-button>\\n        </ion-buttons>\\n        <ion-buttons slot=\\\"end\\\">\\n            <ion-menu-button></ion-menu-button>\\n        </ion-buttons>\\n        <ion-title>Session</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <ion-card>\\n        <ion-card-header>\\n            <h1>{{sessionData?.titleMobile || sessionData?.title}}</h1>\\n        </ion-card-header>\\n        <ion-card-content>\\n            <ng-container *ngIf=\\\"!isErreurRecuperationSession\\\">\\n                <p>\\n                    <em>{{sessionData.description || \\\"Pas de description disponible.\\\"}}</em>\\n                </p>\\n                <ng-container *ngIf=\\\"presentateursData.length > 0\\\">\\n                    <h2 class=\\\"ion-padding-top ion-padding-end\\\">\\n                        Présentateur(s)</h2>\\n                    <ion-list>\\n                        <ion-item\\n                                *ngFor=\\\"let presentateur of presentateursData\\\">\\n                            <ion-avatar slot=\\\"start\\\">\\n                                <img [src]=\\\"urlBlogDevFest.concat(presentateur.photoUrl)\\\"\\n                                     alt=\\\"photo du présentateur\\\">\\n                            </ion-avatar>\\n                            <ion-label>\\n                                <a routerLink=\\\"/speakers/{{presentateur.id}}\\\">\\n                                    {{presentateur.name}}\\n                                </a>\\n                            </ion-label>\\n                        </ion-item>\\n                    </ion-list>\\n                </ng-container>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isErreurRecuperationSession\\\">\\n                <ion-text color=\\\"danger\\\">\\n                    <p>Une erreur s'est produite dans la récupération des\\n                        données de la session.</p>\\n                </ion-text>\\n            </ng-container>\\n            <ion-button expand=\\\"block\\\"\\n                        routerLink=\\\"/sessions/{{sessionId}}/notes\\\">\\n                Mes\\n                notes\\n            </ion-button>\\n        </ion-card-content>\\n    </ion-card>\\n</ion-content>\\n\"","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {IonicModule} from '@ionic/angular';\n\nimport {SessionPage} from './session.page';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: SessionPage\n    },\n    {\n        path: 'notes',\n        loadChildren: () => import ('./notes/notes.module').then(m => m.NotesPageModule)\n    }\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        RouterModule.forChild(routes)\n    ],\n    declarations: [SessionPage]\n})\nexport class SessionPageModule {\n}\n","import {Component, OnInit} from '@angular/core';\nimport {Session} from '../../entities/session';\nimport {DataService} from '../../services/data.service';\nimport {ActivatedRoute, ParamMap} from '@angular/router';\nimport {Speaker} from '../../entities/speaker';\n\n/**\n * Composant gérant la page de description d'une session.\n */\n@Component({\n    selector: 'app-session',\n    templateUrl: './session.page.html',\n    styles: [],\n})\nexport class SessionPage implements OnInit {\n\n    sessionId: string;\n    sessionData: Session;\n    presentateursData: Speaker[] = [];\n    urlBlogDevFest = 'https://devfest2018.gdgnantes.com/';\n    isErreurRecuperationSession: boolean;\n    isErreurRecuperationPresentateurs: boolean;\n\n    /**\n     * Constructeur\n     * @param dataService : DataService\n     * @param route : ActivatedRoute\n     */\n    constructor(private dataService: DataService, private route: ActivatedRoute) {\n        this.sessionId = route.snapshot.paramMap.get('id');\n    }\n\n    /**\n     * Méthode récupérant les données nécessaires à l'affichage de la page.\n     */\n    recupererLesDonnees(): void {\n        this.dataService.recupererDonneesSessions().subscribe(\n            (sessions => {\n                this.isErreurRecuperationSession = false;\n                this.sessionData = sessions.find(session =>\n                    session.id.toString() === this.sessionId);\n                if (this.sessionData.speakers) {\n                    this.sessionData.speakers.forEach(presentateurId =>\n                        this.dataService.recupererDonneesSpeakers()\n                            .subscribe((speakers => this.presentateursData\n                                .push(speakers\n                                    .find(speaker => speaker.id.toString() === presentateurId.toString()))),\n                            () => this.isErreurRecuperationPresentateurs = true\n                        ));\n                }\n            }),\n            (() => this.isErreurRecuperationSession = true)\n        );\n    }\n\n    ngOnInit(): void {\n        this.route.paramMap.subscribe((params: ParamMap) => {\n            const sessionId = params.get('id');\n        });\n        this.recupererLesDonnees();\n    }\n}\n"],"sourceRoot":""}