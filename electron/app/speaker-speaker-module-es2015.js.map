{"version":3,"sources":["./src/app/speakers/speaker/speaker.page.html","./src/app/speakers/speaker/speaker.module.ts","./src/app/speakers/speaker/speaker.page.ts"],"names":[],"mappings":";;;;;;;;;AAAA,+cAA+c,wBAAwB,uVAAuV,2DAA2D,uXAAuX,YAAY,yBAAyB,sCAAsC,utB;;;;;;;;;;;;;;;;;;;;;;ACAlxC;AACM;AACF;AACU;AAEV;AAEA;AAE7C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,yDAAW;KACvB;CACF,CAAC;AAWF,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;CAAG;AAApB,iBAAiB;IAT7B,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY;YACZ,0DAAW;YACX,0DAAW;YACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;SAC9B;QACD,YAAY,EAAE,CAAC,yDAAW,CAAC;KAC5B,CAAC;GACW,iBAAiB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;ACzBkB;AAES;AACD;AAGxD;;GAEG;AAMH,IAAa,WAAW,GAAxB,MAAa,WAAW;IASpB;;;;OAIG;IACH,YAAoB,WAAwB,EAAU,KAAqB;QAAvD,gBAAW,GAAX,WAAW,CAAa;QAAU,UAAK,GAAL,KAAK,CAAgB;QAV3E,mBAAc,GAAG,oCAAoC,CAAC;QAGtD,iBAAY,GAAc,EAAE,CAAC;QAQzB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC5D,CAAC;IAED;;OAEG;IACH,mBAAmB;QACf,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,CAAC,SAAS,CACjD,CAAC,QAAQ,CAAC,EAAE;YACR,IAAI,CAAC,gCAAgC,GAAG,KAAK,CAAC;YAC9C,IAAI,CAAC,gBAAgB,GAAG,QAAQ;iBAC3B,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC;YACpE,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,CAAC,SAAS,CACjD,CAAC,QAAQ,CAAC,EAAE;gBACR,IAAI,CAAC,4BAA4B,GAAG,KAAK,CAAC;gBAC1C,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;oBACvB,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ;yBACnC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,EAAE;wBAC9C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBACnC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,EACF,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,CAAC,CAAC;QAE1D,CAAC,CAAC,EACF,GAAG,EAAE,CAAC,IAAI,CAAC,gCAAgC,GAAG,IAAI,CACrD,CAAC;IACN,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,MAAgB,EAAE,EAAE;YAC/C,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC/B,CAAC;CAEJ;;YArCoC,kEAAW;YAAiB,8DAAc;;AAdlE,WAAW;IALvB,+DAAS,CAAC;QACP,QAAQ,EAAE,aAAa;QACvB,sJAAkC;KAErC,CAAC;2EAemC,kEAAW,EAAiB,8DAAc;GAdlE,WAAW,CAmDvB;AAnDuB","file":"speaker-speaker-module-es2015.js","sourcesContent":["module.exports = \"<ion-header class=\\\"ion-text-center\\\">\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button icon=\\\"arrow-back\\\" text=\\\"\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>Présentateur</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-card>\\n    <ion-card-header class=\\\"ion-text-center\\\">\\n      <h1>{{presentateurData?.name}}</h1>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ng-container *ngIf=\\\"!isErreurRecuperationPresentateur\\\">\\n      <ion-img [src]=\\\"urlBlogDevFest.concat(presentateurData.photoUrl)\\\"></ion-img>\\n      <h2 class=\\\"ion-padding-top ion-padding-end\\\">Biographie</h2>\\n      <p class=\\\"ion-padding-top ion-padding-end\\\">\\n        <em>{{presentateurData.bio || \\\"Aucune biographie disponible.\\\"}}</em>\\n      </p>\\n      <ng-container *ngIf=\\\"!isErreurRecuperationSessions\\\">\\n        <ng-container *ngIf=\\\"sessionsData.length > 0\\\">\\n          <h2 class=\\\"ion-padding-top ion-padding-end\\\">Ses présentations</h2>\\n          <ion-list>\\n            <ion-item *ngFor=\\\"let session of sessionsData\\\">\\n              <ion-label>\\n                <a routerLink=\\\"/sessions/{{session.id}}\\\">\\n                  {{session.titleMobile || session.title}}\\n                </a>\\n              </ion-label>\\n            </ion-item>\\n          </ion-list>\\n        </ng-container>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"isErreurRecuperationSessions\\\">\\n        <ion-text color=\\\"danger\\\">\\n          <p>Une erreur s'est produite dans la récupération des\\n            données des sessions.</p>\\n        </ion-text>\\n      </ng-container>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"isErreurRecuperationPresentateur\\\">\\n        <ion-text color=\\\"danger\\\">\\n          <p>Une erreur s'est produite dans la récupération des\\n            données du présentateur.</p>\\n        </ion-text>\\n      </ng-container>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SpeakerPage } from './speaker.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SpeakerPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [SpeakerPage]\n})\nexport class SpeakerPageModule {}\n","import {Component, OnInit} from '@angular/core';\nimport {Speaker} from '../../entities/speaker';\nimport {ActivatedRoute, ParamMap} from '@angular/router';\nimport {DataService} from '../../services/data.service';\nimport {Session} from '../../entities/session';\n\n/**\n * Composant gérant la page d'affichage de la description d'un présentateur.\n */\n@Component({\n    selector: 'app-speaker',\n    templateUrl: './speaker.page.html',\n    styles: [],\n})\nexport class SpeakerPage implements OnInit {\n\n    isErreurRecuperationPresentateur: boolean;\n    isErreurRecuperationSessions: boolean;\n    urlBlogDevFest = 'https://devfest2018.gdgnantes.com/';\n    presentateurData: Speaker;\n    presentateurId: string;\n    sessionsData: Session[] = [];\n\n    /**\n     * Constructeur\n     * @param dataService : DataService\n     * @param route : ActivatedRoute\n     */\n    constructor(private dataService: DataService, private route: ActivatedRoute) {\n        this.presentateurId = route.snapshot.paramMap.get('id');\n    }\n\n    /**\n     * Méthode récupérant toutes les données nécessaires à l'affichage de la page.\n     */\n    recupererLesDonnees(): void {\n        this.dataService.recupererDonneesSpeakers().subscribe(\n            (speakers => {\n                this.isErreurRecuperationPresentateur = false;\n                this.presentateurData = speakers\n                    .find(speaker => speaker.id.toString() === this.presentateurId);\n                this.dataService.recupererDonneesSessions().subscribe(\n                    (sessions => {\n                        this.isErreurRecuperationSessions = false;\n                        sessions.forEach(session => {\n                            if (session.speakers && session.speakers\n                                .includes(parseInt(this.presentateurId, 10))) {\n                                this.sessionsData.push(session);\n                            }\n                        });\n                    }),\n                    (() => this.isErreurRecuperationSessions = true));\n\n            }),\n            () => this.isErreurRecuperationPresentateur = true\n        );\n    }\n\n    ngOnInit() {\n        this.route.paramMap.subscribe((params: ParamMap) => {\n            const sessionId = params.get('id');\n        });\n        this.recupererLesDonnees();\n    }\n\n}\n"],"sourceRoot":""}