{"version":3,"sources":["./src/app/sessions/session/notes/notes.page.html","./src/app/sessions/session/notes/notes.module.ts","./src/app/sessions/session/notes/notes.page.ts","./src/app/sessions/sessions.service.ts"],"names":[],"mappings":"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","file":"notes-notes-module-es5.js","sourcesContent":["module.exports = \"<ion-header class=\\\"ion-text-center\\\">\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button icon=\\\"arrow-back\\\" text=\\\"\\\"></ion-back-button>\\n        </ion-buttons>\\n        <ion-buttons slot=\\\"end\\\">\\n            <ion-menu-button></ion-menu-button>\\n        </ion-buttons>\\n        <ion-title>Mes notes</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <ion-card>\\n        <ion-card-header>\\n            <h1>{{sessionData?.titleMobile || sessionData?.title}}</h1>\\n        </ion-card-header>\\n        <ion-card-content>\\n            <ion-row>\\n                <ion-fab-button (click)=\\\"prendreUnePhoto()\\\" size=\\\"small\\\">\\n                    <ion-icon ios=\\\"ios-camera\\\" md=\\\"md-camera\\\"></ion-icon>\\n                </ion-fab-button>\\n                <ion-fab-button onclick=\\\"prendreUnePhoto()\\\" size=\\\"small\\\">\\n                    <ion-icon name=\\\"images\\\"></ion-icon>\\n                </ion-fab-button>\\n            </ion-row>\\n\\n            <ng-container *ngIf=\\\"!isErreurRecuperationSession\\\">\\n                <form (ngSubmit)=\\\"enregistrerNote()\\\">\\n                    <ion-textarea [(ngModel)]=\\\"contenuNote\\\"\\n                                  auto-grow=\\\"true\\\"\\n                                  name=\\\"contenuNote\\\"\\n                                  placeholder=\\\"Cette conférence...\\\"\\n                                  rows=\\\"4\\\">\\n                    </ion-textarea>\\n                    <img [src]=\\\"photo\\\" alt=\\\"photo\\\">\\n                    <ion-button (click)=\\\"enregistrerNote()\\\" expand=\\\"block\\\"\\n                                class=\\\"ion-margin-top\\\">\\n                        Enregistrer\\n                    </ion-button>\\n                </form>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isErreurRecuperationSession\\\">\\n                <ion-text color=\\\"danger\\\">\\n                    <p>Une erreur s'est produite dans la récupération des\\n                        données de la session.</p>\\n                </ion-text>\\n            </ng-container>\\n        </ion-card-content>\\n    </ion-card>\\n</ion-content>\\n\"","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {IonicModule} from '@ionic/angular';\n\nimport {NotesPage} from './notes.page';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: NotesPage\n    }\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        RouterModule.forChild(routes)\n    ],\n    declarations: [NotesPage]\n})\nexport class NotesPageModule {\n}\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, ParamMap} from '@angular/router';\nimport {DataService} from '../../../services/data.service';\nimport {Session} from '../../../entities/session';\nimport {Note} from './note';\nimport {SessionsService} from '../../sessions.service';\nimport {Plugins, CameraResultType, CameraSource} from '@capacitor/core';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\n/**\n * Composant gérant l'affichage de la page de note sur une session.\n */\n@Component({\n    selector: 'app-notes',\n    templateUrl: './notes.page.html',\n    styles: ['ion-textarea { border: dashed; border-color: silver; ' +\n    'border-radius: 16px; background-color: #f5f6f9; font-style: italic}'],\n})\nexport class NotesPage implements OnInit {\n\n    sessionId: string;\n    sessionData: Session;\n    isErreurRecuperationSession: boolean;\n    contenuNote: string;\n    isErreurPriseDePhoto: boolean;\n    photo: SafeResourceUrl;\n\n    /**\n     * Constructeur\n     * @param route : ActivatedRoute\n     * @param dataService : DataService\n     * @param sessionsService : SessionsService\n     * @param sanitizer : DomSanitizer\n     */\n    constructor(private route: ActivatedRoute, private dataService: DataService,\n                private sessionsService: SessionsService, private sanitizer: DomSanitizer) {\n        this.sessionId = route.snapshot.paramMap.get('id');\n    }\n\n    /**\n     * Méthode récupérant les données nécessaires à l'affichage de la page.\n     */\n    recupererDonnees(): void {\n        this.dataService.recupererDonneesSessions().subscribe(\n            (sessions => this.sessionData = sessions.find(\n                session => session.id.toString() === this.sessionId)),\n            () => this.isErreurRecuperationSession = true\n        );\n        const note = this.sessionsService.recupererNoteParIdSession(this.sessionId);\n        if (note != null) {\n            this.contenuNote = note.message;\n        } else {\n            this.contenuNote = '';\n        }\n    }\n\n    /**\n     * Méthode pour enregistrer une note en sollicitant un service.\n     */\n    enregistrerNote(): void {\n        const note: Note = {sessionId: this.sessionId, message: this.contenuNote};\n        this.sessionsService.sauvegarderNote(note);\n    }\n\n    async prendreUnePhoto() {\n        /*        const options: CameraOptions = {\n                    quality: 100,\n                    destinationType: this.camera.DestinationType.FILE_URI,\n                    encodingType: this.camera.EncodingType.PNG,\n                    mediaType: this.camera.MediaType.PICTURE\n                };\n\n                this.camera.getPicture(options).then((imageData) => {\n                    this.isErreurPriseDePhoto = false;\n                    // imageData is either a base64 encoded string or a file URI\n                    // If it's base64 (DATA_URL):\n                    this.base64Image = 'data:image/png;base64,' + imageData;\n                    console.log(this.base64Image);\n                }, () => {\n                    this.isErreurPriseDePhoto = true;\n                });*/\n\n                const image = await Plugins.Camera.getPhoto({\n                    quality: 100,\n                    allowEditing: false,\n                    resultType: CameraResultType.DataUrl,\n                    source: CameraSource.Camera // si .Photo pour aller chercher\n                    // photo ou prompt, qui donne accès aux deux\n                });\n\n                this.photo = this.sanitizer.bypassSecurityTrustResourceUrl(image && (image.dataUrl));\n\n    }\n\n    ngOnInit(): void {\n        this.route.paramMap.subscribe(\n            (params: ParamMap) => {\n                const sessionId = params.get('id');\n            }\n        );\n        this.recupererDonnees();\n\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {Note} from './session/notes/note';\n\n/**\n * Classe de service regroupant les méthodes utiles pour les pages commençant par\n * /sessions.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class SessionsService {\n\n    notes: Note[];\n\n    constructor() {\n    }\n\n    /**\n     * Méthode permettant de sauvegarder la note renseignée qui concerne une\n     * session dans le cache ou de la mettre à jour si elle existe déjà.\n     * @param note : Note la note renseignée par l'utilisateur\n     * @return : void\n     */\n    sauvegarderNote(note: Note): void {\n        if (!localStorage.getItem('NotesSessions')) {\n            this.notes = [];\n            this.notes.push(note);\n            localStorage.setItem('NotesSessions', JSON.stringify(this.notes));\n        } else {\n            this.notes = JSON.parse(localStorage.getItem('NotesSessions'));\n            if (this.notes.find(noteLS => noteLS.sessionId === note.sessionId)) {\n                this.notes.find(noteLS => noteLS.sessionId === note.sessionId).message = note.message;\n            } else {\n                this.notes.push(note);\n            }\n            localStorage.setItem('NotesSessions', JSON.stringify(this.notes));\n        }\n    }\n\n    /**\n     * Méthode permettant de retourner la note écrite pour la session indiquée.\n     * @param sessionId : string l'id de la session\n     * @return : Note ou null\n     */\n    recupererNoteParIdSession(sessionId: string): Note | null {\n        if (localStorage.getItem('NotesSessions')) {\n            this.notes = JSON.parse(localStorage.getItem('NotesSessions'));\n            if (this.notes.find(noteLS => noteLS.sessionId === sessionId)) {\n                return this.notes.find(noteLS => noteLS.sessionId === sessionId);\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n}\n"],"sourceRoot":""}